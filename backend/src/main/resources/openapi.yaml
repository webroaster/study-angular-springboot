openapi: 3.1.0
info:
  title: OpenAPI definition
  version: 1.0.0
  description: demo アプリケーション

servers:
  - url: http://localhost:8080
    description: Generated server url

paths:
  /api/users/{id}:
    put:
      summary: 特定のユーザーを更新
      tags:
        - Users
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    delete:
      summary: 特定のユーザーを削除
      tags:
        - Users
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功
        '404':
          description: ユーザーが見つかりません

  /api/todos/{id}:
    put:
      summary: 特定のTODOを更新
      tags:
        - Todos
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'

    delete:
      summary: 特定のTODOを削除
      tags:
        - Todos
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除成功
        '404':
          description: TODOが見つかりません

  '/api/users':
    get:
      summary: ユーザー名パスワードが一致するユーザーを取得
      tags:
        - Users
      operationId: getUserByUsernameAndPassword
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            example: 'user1'
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: 'password'
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserResponse'

    post:
      summary: ユーザー新規登録
      tags:
        - Users
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  '/api/todos':
    get:
      summary: 全ての TODO を取得
      tags:
        - Todos
      operationId: getAllTodos
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoResponse'

    post:
      summary: Todoの新規登録
      tags:
        - Todos
      operationId: createTodo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'

components:
  schemas:
    UserRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        username:
          type: string
          example: 'user1'
        displayName:
          type: string
          example: 'ユーザー1'
        password:
          type: string
          example: 'password'
        status:
          type: string
          example: 'enable'
      required:
        - username
        - password
        - status
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        username:
          type: string
          example: 'user1'
        displayName:
          type: string
          example: 'ユーザー1'
        password:
          type: string
          example: 'password'
        status:
          type: string
          example: 'enable'
      required:
        - id
        - username
        - password
        - status
    TodoRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        title:
          type: string
          example: 'タスク1'
        dueDate:
          type: string
          format: date
        completed:
          type: boolean
      required:
        - title
    TodoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        title:
          type: string
          example: 'タスク1'
        dueDate:
          type: string
          format: date
        completed:
          type: boolean
      required:
        - id
        - title
