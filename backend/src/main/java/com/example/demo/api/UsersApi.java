/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api;

import com.example.demo.dto.UserRequest;
import com.example.demo.dto.UserResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Users", description = "the Users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/users : ユーザー新規登録
     *
     * @param userRequest  (required)
     * @return 作成成功 (status code 200)
     */
    @Operation(
        operationId = "createUser",
        summary = "ユーザー新規登録",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "作成成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> _createUser(
        @Parameter(name = "UserRequest", description = "", required = true) @Valid @RequestBody UserRequest userRequest
    ) {
        return createUser(userRequest);
    }

    // Override this method
    default  ResponseEntity<UserResponse> createUser(UserRequest userRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"displayName\" : \"ユーザー1\", \"id\" : 1, \"username\" : \"user1\", \"status\" : \"enable\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/users/{id} : 特定のユーザーを削除
     *
     * @param id  (required)
     * @return 削除成功 (status code 204)
     *         or ユーザーが見つかりません (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "特定のユーザーを削除",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "削除成功"),
            @ApiResponse(responseCode = "404", description = "ユーザーが見つかりません")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/users/{id}"
    )
    
    default ResponseEntity<Void> _deleteUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return deleteUser(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteUser(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/users : ユーザー名パスワードが一致するユーザーを取得
     *
     * @param username  (required)
     * @param password  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUserByUsernameAndPassword",
        summary = "ユーザー名パスワードが一致するユーザーを取得",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> _getUserByUsernameAndPassword(
        @NotNull @Parameter(name = "username", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = true) String username,
        @NotNull @Parameter(name = "password", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "password", required = true) String password
    ) {
        return getUserByUsernameAndPassword(username, password);
    }

    // Override this method
    default  ResponseEntity<UserResponse> getUserByUsernameAndPassword(String username, String password) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"displayName\" : \"ユーザー1\", \"id\" : 1, \"username\" : \"user1\", \"status\" : \"enable\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/users/{id} : 特定のユーザーを更新
     *
     * @param id  (required)
     * @param userRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        summary = "特定のユーザーを更新",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> _updateUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UserRequest", description = "", required = true) @Valid @RequestBody UserRequest userRequest
    ) {
        return updateUser(id, userRequest);
    }

    // Override this method
    default  ResponseEntity<UserResponse> updateUser(Long id, UserRequest userRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"displayName\" : \"ユーザー1\", \"id\" : 1, \"username\" : \"user1\", \"status\" : \"enable\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
