/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api;

import com.example.demo.dto.TodoRequest;
import com.example.demo.dto.TodoResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Todos", description = "the Todos API")
public interface TodosApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/todos : Todoの新規登録
     *
     * @param todoRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTodo",
        summary = "Todoの新規登録",
        tags = { "Todos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TodoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/todos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TodoResponse> _createTodo(
        @Parameter(name = "TodoRequest", description = "", required = true) @Valid @RequestBody TodoRequest todoRequest
    ) {
        return createTodo(todoRequest);
    }

    // Override this method
    default  ResponseEntity<TodoResponse> createTodo(TodoRequest todoRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2000-01-23\", \"id\" : 1, \"completed\" : true, \"title\" : \"タスク1\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/todos/{id} : 特定のTODOを削除
     *
     * @param id  (required)
     * @return 削除成功 (status code 204)
     *         or TODOが見つかりません (status code 404)
     */
    @Operation(
        operationId = "deleteTodo",
        summary = "特定のTODOを削除",
        tags = { "Todos" },
        responses = {
            @ApiResponse(responseCode = "204", description = "削除成功"),
            @ApiResponse(responseCode = "404", description = "TODOが見つかりません")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/todos/{id}"
    )
    
    default ResponseEntity<Void> _deleteTodo(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return deleteTodo(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteTodo(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/todos : 全ての TODO を取得
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllTodos",
        summary = "全ての TODO を取得",
        tags = { "Todos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TodoResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/todos",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TodoResponse>> _getAllTodos(
        
    ) {
        return getAllTodos();
    }

    // Override this method
    default  ResponseEntity<List<TodoResponse>> getAllTodos() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"dueDate\" : \"2000-01-23\", \"id\" : 1, \"completed\" : true, \"title\" : \"タスク1\" }, { \"dueDate\" : \"2000-01-23\", \"id\" : 1, \"completed\" : true, \"title\" : \"タスク1\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/todos/{id} : 特定のTODOを更新
     *
     * @param id  (required)
     * @param todoRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTodo",
        summary = "特定のTODOを更新",
        tags = { "Todos" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TodoResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/todos/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TodoResponse> _updateTodo(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "TodoRequest", description = "", required = true) @Valid @RequestBody TodoRequest todoRequest
    ) {
        return updateTodo(id, todoRequest);
    }

    // Override this method
    default  ResponseEntity<TodoResponse> updateTodo(Long id, TodoRequest todoRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2000-01-23\", \"id\" : 1, \"completed\" : true, \"title\" : \"タスク1\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
